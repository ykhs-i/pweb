<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>ダイアグラム</title>

    <style>

	html {
		font-size: 3.3vw;
	}

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	body {
		min-height: 100vh;
		width: 100%;
		background-color: #FDFEFE;
		font-family: "ヒラギノ丸ゴシック", "Helvetica Neue", Arial, sans-serif;
		user-select: none;
		touch-action: pan-y;
		overflow-y: scroll;
		-ms-overflow-style: none;
		scrollbar-width: none;
	}

	body::-webkit-scrollbar {
		display: none;
	}

        .content {
            cursor: pointer;
            position: relative;
            margin: 0;
        }
        .base_img {
            display: block;
            position: relative;
            margin: 0 auto;
            width: 100%;
            max-height: 100vh;
            object-fit: contain;
            top: 0;
            transition: transform 0.5s ease, transform-origin 0s ease;
            cursor: grab;
        }
        .base_img:active {
            cursor: grabbing;
        }
    </style>
</head>
<body>
    <div class="content">
        <img class="base_img" src='nodegram.png' alt="拡大対象の画像">
    </div>

    <script>
        const image = document.querySelector('.base_img');

        let isZoomed = false;
        let isDragging = false;
        let startX, startY, scrollLeft, scrollTop;
        let initialDistance = 0;

        image.addEventListener('click', (event) => {
            if (!isZoomed) {
                const rect = image.getBoundingClientRect();
                const offsetX = event.clientX - rect.left;
                const offsetY = event.clientY - rect.top;

                image.style.transformOrigin = `${offsetX}px ${offsetY}px`;
                image.style.transform = 'scale(3)';
                isZoomed = true;
            }
        });

        image.addEventListener('dblclick', () => {
            image.style.transform = 'scale(1)';
            isZoomed = false;
        });

        image.addEventListener('touchend', (event) => {
            if (event.detail === 2) {
                image.style.transform = 'scale(1)';
                isZoomed = false;
            }
        });

        image.addEventListener('mousedown', (event) => {
            if (isZoomed) {
                isDragging = true;
                startX = event.pageX - image.offsetLeft;
                startY = event.pageY - image.offsetTop;
                scrollLeft = image.scrollLeft;
                scrollTop = image.scrollTop;
            }
        });

        image.addEventListener('mouseleave', () => {
            isDragging = false;
        });

        image.addEventListener('mouseup', () => {
            isDragging = false;
        });

        image.addEventListener('mousemove', (event) => {
            if (isDragging) {
                event.preventDefault();
                const x = event.pageX - image.offsetLeft;
                const y = event.pageY - image.offsetTop;
                const walkX = (x - startX) * 3; // Adjust the multiplier as needed
                const walkY = (y - startY) * 3; // Adjust the multiplier as needed
                image.style.transform = `translate(${walkX}px, ${walkY}px) scale(3)`;
            }
        });

        image.addEventListener('touchstart', (event) => {
            if (event.touches.length === 2) {
                initialDistance = Math.hypot(
                    event.touches[0].pageX - event.touches[1].pageX,
                    event.touches[0].pageY - event.touches[1].pageY
                );
            }
        });

        image.addEventListener('touchmove', (event) => {
            if (event.touches.length === 2) {
                const currentDistance = Math.hypot(
                    event.touches[0].pageX - event.touches[1].pageX,
                    event.touches[0].pageY - event.touches[1].pageY
                );

                if (initialDistance) {
                    const scale = currentDistance / initialDistance;
                    image.style.transform = `scale(${scale})`;
                    isZoomed = scale > 1;
                }
            }
        });
    </script>
</body>
</html>
